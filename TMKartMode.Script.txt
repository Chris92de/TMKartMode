#Extends "Modes/TrackMania/TM_Cup_Online.Script.txt"

#Include "TextLib" as TextLib
#Include "MathLib" as MathLib
#Include "ColorLib"

#Include "Modes/TrackMania/Common/Effects.Script.txt" as Effects

#Include "Modes/TrackMania/UI/EffectBoxLayer.Script.txt" as EffectBoxLayer

#Setting S_TrustClientSimu True
#Setting S_UseCrudeExtrapolation False

/////////////
// Structs //
/////////////

#Struct K_SlotPlayerUI {
    Text EffectName;
    CSmPlayer Player;
    Text PlayerLogin;
}

///////////
// Plugs //
///////////

declare Effects::K_BoxEffect[Text] PlayersAvilEffectList;
declare K_SlotPlayerUI[Text] PlayersUI;

Void SyncPlayerAvilEffectWithUI(CSmPlayer _player) {
    declare Effects::K_BoxEffect PlayerAvilEffect = PlayersAvilEffectList[_player.User.Login];
    declare netwrite Text Net_PlayerAvilEffectName for _player;
    Net_PlayerAvilEffectName = PlayerAvilEffect.Name;
}

Void SetPlayerAvilEffect(CSmPlayer _player, Integer _effectIndex) {
    PlayersAvilEffectList[_player.User.Login] = Effects::GetByIndex(_effectIndex);
    PlayersUI[_player.User.Login].EffectName = Effects::GetByIndex(_effectIndex).Name;

    SyncPlayerAvilEffectWithUI(_player);
}

Void GivePlayerRandonAvilEffect(CSmPlayer _player) {
    declare Effects::K_BoxEffect Effect = Effects::GetRandomEffect();
    PlayersAvilEffectList[_player.User.Login] = Effect;
    //UIManager.GetUI(_player).QueueMessage(1000, 1, CUIConfig::EMessageDisplay::Big, TextLib::Compose("You get $<%1$>", Effect.Name));
    
    SyncPlayerAvilEffectWithUI(_player);
}

CSmPlayer GetNearestPlayer(CSmPlayer _player) {
    declare CSmPlayer NearestPlayer = _player;
    declare Real NearestDistance = 100000.00;

    foreach (Player in Players) {
        if (Player.User.Login != _player.User.Login) {
            declare Real CurrentDistance = MathLib::Abs(MathLib::Distance(Player.Position, _player.Position));
            if (CurrentDistance < NearestDistance) {
                NearestDistance = CurrentDistance;
                NearestPlayer = Player;
            }
        }
    }

    return NearestPlayer;
}

Void OnPlayerActivedEffect(CSmPlayer CurrentPlayer) {
    declare Effects::K_BoxEffect AvilEffect = PlayersAvilEffectList[CurrentPlayer.User.Login];
    log("trying to activate an effect");
    if (AvilEffect.Name != "None") {
        log("activated an effect");
        switch(AvilEffect.TargetMode) {
            case "self": {
                Effects::ActivateOnPlayer(CurrentPlayer, AvilEffect);
                UIManager.GetUI(CurrentPlayer).QueueMessage(2000, 2, CUIConfig::EMessageDisplay::Big, TextLib::Compose("Activated $<%1$> on you", AvilEffect.Name));
                SetPlayerAvilEffect(CurrentPlayer, 0);
            }

            case "nearest": {
                declare CSmPlayer NearestPlayer = GetNearestPlayer(CurrentPlayer);
                Effects::ActivateOnPlayer(NearestPlayer, AvilEffect);
                UIManager.GetUI(CurrentPlayer).QueueMessage(2000, 2, CUIConfig::EMessageDisplay::Big, TextLib::Compose("Activated $<%1$> on $<%2$>", AvilEffect.Name, NearestPlayer.User.Name));
                SetPlayerAvilEffect(CurrentPlayer, 0);
            }

            case "all": {
                foreach(Player in Players) {
                    if (Player.User.Login != CurrentPlayer.User.Login) {
                        Effects::ActivateOnPlayer(Player, AvilEffect);
                    }
                }
                UIManager.GetUI(CurrentPlayer).QueueMessage(2000, 2, CUIConfig::EMessageDisplay::Big, TextLib::Compose("Activated $<%1$> on everyone", AvilEffect.Name));
                SetPlayerAvilEffect(CurrentPlayer, 0);
            }
        }
        // for solo testing just comment this "if" statment
        //if (NearestPlayer.User.Login != _player.User.Login) {

            
        //}
    }
}

***Match_StartServer***
***
UsePvECollisions = True;
UsePvPCollisions = True;

Effects::InitEffects();
***

***Match_PlayLoop***
***
    // Init players that doesnt initialized
    foreach (Player in Players) {
        if(!PlayersUI.existskey(Player.User.Login)) {
            PlayersAvilEffectList[Player.User.Login] = Effects::GetByIndex(0);

            declare K_SlotPlayerUI PlayerUI;
            PlayerUI.EffectName = Effects::GetByIndex(0).Name;
            PlayerUI.Player = Player;
            PlayersUI[Player.User.Login] = PlayerUI;
            CreateUIForPlayer(Player);

            SyncPlayerAvilEffectWithUI(Player);
        }
    }

    /// Process events
    foreach (Event in PendingEvents) {
        if(Event.Type == CSmModeEvent::EType::OnPlayerRemoved) {
            log(Event.User.Login);
            PlayersUI.removekey(Event.User.Login);
        }
        if(Event.Type == CSmModeEvent::EType::OnPlayerTriggersWaypoint) {
            GivePlayerRandonAvilEffect(Event.Player); // Try to assign a random effect to the player
        }
        if(Event.Type == CSmModeEvent::EType::OnPlayerRequestRespawn) {
            SetPlayerAvilEffect(Event.Player, 0); // Remove the effect from the player
            Effects::ClearEffectOnPlayer(Event.Player);
        }

    }

    Private_HandleUIEvents();
    Effects::ProcessEffectEventsLoop();
***

/**
***Match_InitRound***
***
***

***MB_Private_AfterEndRound***
***
***

***Match_InitMap***
***

***

***MB_Private_AfterEndMap***
***

***

***Match_InitMatch***
***

***

***MB_Private_AfterEndMatch***
***

***
*/

Void CreateUIForPlayer(CSmPlayer _player) {
    declare Text LayerId = TextLib::Compose("EffectBoxLayer_$<%1$>", _player.User.Login);
    Layers::Create(LayerId, EffectBoxLayer::GetManialink());
    Layers::SetType(LayerId, CUILayer::EUILayerType::Normal);
    Layers::Attach(LayerId, _player);
}

Void Private_HandleUIEvents() {
	foreach (Event in UIManager.PendingEvents) {
		if(Event.CustomEventType == EffectBoxLayer::C_ActivateEffectEvent_Type) {
            log("got even from the player");
			declare CSmPlayer Player = GetPlayer(Event.UI);
			if(Player == Null) continue;
			OnPlayerActivedEffect(Player);
		}
	}
}
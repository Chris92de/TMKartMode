// #RequireContext CSmMlScriptIngame

/**
* You must sync this structure with Libs/TMKart/Effects.Script.txt equalent one
*/
#Struct K_BoxEffect {
    Text        Name;
    Text        Marker;
    Text        TargetMode;
    Integer     Duration;
    Text        Function;
    Text        ImageURL;
    Text        Color;
}

Text Private_GenEffects(K_BoxEffect[] EffectList) {
    declare OutXml = """<frame id="Effects">""";
    foreach (i => Effect in EffectList) {
        declare Text Hid = "hidden=\"1\"";
        if (i == 0) Hid = "hidden=\"0\"";
        OutXml ^= """
        <frame id="{{{ Effect.Name }}}" {{{ Hid }}}>
        <quad pos="12.5 -10" size="19 19" opacity="1" image="{{{ Effect.ImageURL }}}" halign="center" valign="center"/>
        <label pos="12.5 -21.5" size="20 4" text="{{{ Effect.Name }}}" textfont="GameFontRegular" textsize="2" halign="center" valign="center" />
        </frame>
        """;
    }
    OutXml ^= """</frame>""";
    return OutXml;
}

Text GetManialink(K_BoxEffect[] EffectList) {
    declare Text EffectsXml = Private_GenEffects(EffectList);

    return """<?xml version="1.0" encoding="utf-8" standalone="yes"?>
    <manialink version="3">
    <frame pos="-12.5 85">
    {{{ EffectsXml }}}
    <quad pos="0 0" z-index="0" size="25 25" style="Bgs1InRace" substyle="BgColorContour" opacity="0.7" />
    </frame>
    <script><!--
    #Include "TextLib" as TextLib
    #Include "MathLib" as MathLib

    declare CAudioSource G_Sfx;

    Void SendPlayerActivatedEffect() {
        SendCustomEvent("activate", []);
    }

    Void SetActiveEffect(Text EffectName) {
        declare CMlFrame Frame <=> (Page.GetFirstChild("Effects") as CMlFrame);
        foreach (Elem in Frame.Controls) {
            Elem.Hide();
            if (Elem.ControlId == EffectName) Elem.Show();
        }
    }

    Void SetEffect(Integer Number) {
        declare CMlFrame Frame <=> (Page.GetFirstChild("Effects") as CMlFrame);
        foreach (i => Elem in Frame.Controls) {
            Elem.Hide();
            if (i == Number) Elem.Show();
        }
    }


    Void CarouselActiveEffect(Text Effect) {
        declare Integer Interval = 200;
        declare Integer TotalInterval = 0;
        declare Integer Steps = 21;
        declare Integer Counter = 0;
        declare Integer StartTime = Now;
        declare CMlFrame Frame <=> (Page.GetFirstChild("Effects") as CMlFrame);
        declare Integer PrevIndex = -1;
        SetActiveEffect("None");
        G_Sfx.Play();
        while (True) {
            yield;
            if (Now >= StartTime + TotalInterval) {
                Interval = Counter  * 15;
                TotalInterval += Interval;
                declare rnd = MathLib::Rand(1, Frame.Controls.count-1);
                if (rnd == PrevIndex) rnd = MathLib::Rand(1, Frame.Controls.count-1); // prevent duplicates
                SetEffect(rnd);
                PrevIndex = rnd;
                Counter += 1;
            }

            if (Counter >= Steps)  {
                SetActiveEffect(Effect);
                break;
            }
        }
    }

    main()
    {
        wait(GUIPlayer != Null);
        declare LastEffectName = "";
        declare netread Text Net_PlayerAvilEffectMarker for GUIPlayer = "None";
        declare Integer Key = 33;
        G_Sfx = Audio.CreateSound("https://cdn.discordapp.com/attachments/934577399033647104/969235965719760936/roulette_sfx2.ogg");
        while(True)
        {
            yield;

            if (LastEffectName != Net_PlayerAvilEffectMarker) {
                LastEffectName = Net_PlayerAvilEffectMarker;
                if (Net_PlayerAvilEffectMarker == "" || Net_PlayerAvilEffectMarker == "None") {
                    SetActiveEffect("None");
                } else {
                    CarouselActiveEffect(Net_PlayerAvilEffectMarker);
                }
            }

            if (Net_PlayerAvilEffectMarker == "None") continue;

            foreach (Event in PendingEvents) {
                if (Event.Type == CMlScriptEvent::Type::KeyPress &&Event.KeyCode == Key) {
                    SendPlayerActivatedEffect();
                }
            }

            foreach (Event in Input.PendingEvents) {
                if (Event.Type == CInputEvent::EType::PadButtonPress) {
                    if (Event.Button == CInputEvent::EButton::LeftStick) {
                        SendPlayerActivatedEffect();
                    }
                }
            }
        }
    }
    --></script>
    </manialink>""";
}
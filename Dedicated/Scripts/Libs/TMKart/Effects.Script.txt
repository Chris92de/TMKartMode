//#RequireContext CSmMode

#Include "MathLib" as ML
#Include "TextLib" as TL

#Include "Libs/Nadeo/ModeLibs/Legacy/Layers2.Script.txt"    as Layers

#Include "Libs/TMKart/UI/GameUI.Script.txt"                 as GameUI
#Include "Libs/TMKart/UI/EffectInkSplats.Script.txt"        as InkSplats
#Include "Libs/TMKart/UI/PlayerEffects.Script.txt"          as PlayerEffects
#Include "Libs/TMKart/UI/EffectBoxLayer.Script.txt"         as EffectBoxLayer
#Include "Libs/TMKart/UI/EventFeed.Script.txt"              as EventFeed
#Include "Libs/TMKart/UI/MapName.Script.txt"                as MapNameLayer

/////////////
// Structs //
/////////////

/**
* You must sync this structure with Libs/TMKart/UI/EffectBoxLayer.Script.txt equalent one
*/
#Struct K_BoxEffect {
    Text        Name;
    Text        Marker;
    Text        TargetMode;
    Integer     Duration;
    Text        Function;
    Text        ImageURL;
    Text        Color;
}

#Struct K_BoxEffectOnPlayer {
    K_BoxEffect     Effect;
    Integer         StartAt;
    Integer         EndAt;
    Text            Login;
}

///////////
// Plugs //
///////////

declare K_BoxEffect[] G_EffectsList;
declare K_BoxEffectOnPlayer[Text] G_EffectOnPlayer;
declare K_BoxEffect[Text] G_PlayerEffect;

///////////////
// Functions //
///////////////

K_BoxEffect GetEffectByIndex(Integer _Index) {
    if (G_EffectsList.existskey(_Index)) return G_EffectsList[_Index];
    return K_BoxEffect{};
}

K_BoxEffect GetRandomEffect() {
    return GetEffectByIndex(ML::Rand(1, G_EffectsList.count - 1));
}

Integer GetPlayerPosition(CSmPlayer _Player) {
	if (_Player != Null) {
        declare Text Dossard = TL::RegexReplace("^0", _Player.Dossard, "", "");
        return TL::ToInteger(Dossard);
    }
    return -1;
}

Integer GetPlayerPosition(Text _Login) {
    declare CSmPlayer Player = GetPlayer(_Login);
	if (Player != Null) {
		return GetPlayerPosition(Player);
	}
	return -1;
}

CSmPlayer GetFirstPlayer() {
    foreach (Player in Players) {
        declare Text Dossard = TL::RegexReplace("^0", Player.Dossard, "", "");
        if (TL::ToInteger(Dossard) == 1) {
            return Player;
        }
    }
    return Null;
}

Void InitEffects() {
    // None effect
    declare K_BoxEffect NoneEffect = K_BoxEffect{
		Name 	   = "None",
		Marker     = "e_none",
		TargetMode = "none",
		Duration   = 0,
		ImageURL   = "https://raw.githubusercontent.com/reaby/TMKartMode/master/Assets/nothing.png",
		Color      = "fff"
	};
    G_EffectsList.add(NoneEffect);

	declare K_BoxEffect RespawnEffect = K_BoxEffect {
		Name       = "Respawn",
		Marker     = "e_respawn",
		TargetMode = "first",
		Duration   = 100,
		ImageURL   = "https://raw.githubusercontent.com/reaby/TMKartMode/master/Assets/respawn.png",
		Color      = "b23"
	};
    G_EffectsList.add(RespawnEffect);

	declare K_BoxEffect ImmunityEffect = K_BoxEffect {
		Name       = "Immunity",
		Marker     = "e_immunity",
		TargetMode = "self",
		Duration   = 10000,
		ImageURL   = "https://raw.githubusercontent.com/reaby/TMKartMode/master/Assets/immunity.png",
		Color      = "fff"
	};
    G_EffectsList.add(ImmunityEffect);

	// NoEngine
    declare K_BoxEffect NoEngine = K_BoxEffect {
		Name       = "No Engine",
		Marker     = "e_no_engine",
		Function   = "SetPlayer_Delayed_NoEngine",
		TargetMode = "nearest",
		Duration   = 5000,
		ImageURL   = "https://raw.githubusercontent.com/reaby/TMKartMode/master/Assets/engine_off.png",
		Color      = "ff0"
	};
	G_EffectsList.add(NoEngine);

    // CruiseControlAll
    declare K_BoxEffect ForceCruiseControlAll = K_BoxEffect {
		Name       = "Force Cruise Control",
		Marker     = "e_cruise_all",
		TargetMode = "nearest",
		Duration   = 3500,
		ImageURL   = "https://raw.githubusercontent.com/reaby/TMKartMode/master/Assets/cruisecontrol.png",
		Color      = "0d0"
		};
		G_EffectsList.add(ForceCruiseControlAll);

    // Turbo
    declare K_BoxEffect Turbo = K_BoxEffect {
		Name       = "Reactor Boost",
		Marker     = "e_turbo_self",
		TargetMode = "self",
		Duration   = 2500,
		ImageURL   = "https://raw.githubusercontent.com/reaby/TMKartMode/master/Assets/boost1.png",
		Color      = "f90"
	};
	G_EffectsList.add(Turbo);

    // Turbo2
    declare K_BoxEffect SuperTurbo = K_BoxEffect {
		Name       = "Super Reactor Boost",
		Marker     = "e_turbo2_self",
		TargetMode = "self",
		Duration   = 2500,
		ImageURL   = "https://raw.githubusercontent.com/reaby/TMKartMode/master/Assets/boost2.png",
		Color      = "e22"
	};
	G_EffectsList.add(SuperTurbo);

    // Fragile
    declare K_BoxEffect Fragile = K_BoxEffect {
		Name       = "Fragile",
		Marker     = "e_fragile",
		TargetMode = "nearest",
		Duration   = 10000,
		ImageURL   = "https://raw.githubusercontent.com/reaby/TMKartMode/master/Assets/fragile.png",
		Color      = "d70"
	};
	G_EffectsList.add(Fragile);

    // NoBrake
    declare K_BoxEffect NoBrake = K_BoxEffect {
		Name       = "No Brakes",
		Marker     = "e_nobrake",
		TargetMode = "nearest",
		Duration   = 5000,
		ImageURL   = "https://raw.githubusercontent.com/reaby/TMKartMode/master/Assets/nobrake.png",
		Color      = "ef0"
	};
	G_EffectsList.add(NoBrake);

    // LowGravity
    declare K_BoxEffect LowGravity = K_BoxEffect {
		Name         = "Low Gravity",
		Marker       = "e_low_gravity",
		TargetMode   = "nearest",
		Duration     = 5000,
		ImageURL     = "https://raw.githubusercontent.com/reaby/TMKartMode/master/Assets/lowgravity.png",
		Color        = "0af"
	};
	G_EffectsList.add(LowGravity);

    // SlowMo
    declare K_BoxEffect SlowMo = K_BoxEffect {
		Name         = "Slow Motion",
		Marker       = "e_slowmo",
		TargetMode   = "first",
		Duration     = 5000,
		ImageURL     = "https://raw.githubusercontent.com/reaby/TMKartMode/master/Assets/slowmo.png",
		Color        = "aaa"
	};
	G_EffectsList.add(SlowMo);

    // Yeet
    declare K_BoxEffect Yeet = K_BoxEffect {
		Name           = "YEEET",
		Marker         = "e_turbo2_self",
		TargetMode     = "nearest",
		Duration       = 3000,
		ImageURL       = "https://raw.githubusercontent.com/reaby/TMKartMode/master/Assets/yeet.png",
		Color          = "900"
	};
	G_EffectsList.add(Yeet);

    // Ink Splats
    declare K_BoxEffect InkSplats = K_BoxEffect {
		Name           = "Ink Splats",
		Marker         = "e_ink_splats",
		TargetMode     = "all",
		ImageURL       = "https://raw.githubusercontent.com/reaby/TMKartMode/master/Assets/ink_all_icon.png",
		Color          = "000",
		Duration       = 5000
	};
	G_EffectsList.add(InkSplats);

    // NoGrip
    declare K_BoxEffect NoGrip = K_BoxEffect {
		Name           = "No Grip",
		Marker         = "e_no_grip",
		TargetMode     = "nearest",
		ImageURL       = "https://raw.githubusercontent.com/reaby/TMKartMode/master/Assets/nogrip.png",
		Color          = "0dd",
		Duration       = 5000
	};
	G_EffectsList.add(NoGrip);

    // No Steer
    declare K_BoxEffect NoSteer = K_BoxEffect {
		Name           = "No Steer",
		Marker         = "e_no_steer",
		TargetMode     = "nearest",
		ImageURL       = "https://raw.githubusercontent.com/reaby/TMKartMode/master/Assets/nosteer.png",
		Color          = "d0d",
		Duration       = 1000
	};
	G_EffectsList.add(NoSteer);

    Layers::Create("MapName", MapNameLayer::GetManialink());
    Layers::SetType("MapName", CUILayer::EUILayerType::Normal);
    Layers::Attach("MapName");

    Layers::Create("InkSplats", InkSplats::GetManialink());
    Layers::SetType("InkSplats", CUILayer::EUILayerType::Normal);
    Layers::Attach("InkSplats");

    Layers::Create("EffectBox", EffectBoxLayer::GetManialink(G_EffectsList));
    Layers::SetType("EffectBox", CUILayer::EUILayerType::Normal);
    Layers::Attach("EffectBox");

    Layers::Create("PlayerEffects", PlayerEffects::GetManialink());
    Layers::SetType("PlayerEffects", CUILayer::EUILayerType::Normal);
    Layers::Attach("PlayerEffects");

    Layers::Create("GameUI", GameUI::GetManialink());
    Layers::SetType("GameUI", CUILayer::EUILayerType::Normal);
    Layers::Attach("GameUI");

    Layers::Create("EventFeed", EventFeed::GetManialink(8));
    Layers::SetType("EventFeed", CUILayer::EUILayerType::Normal);
    Layers::Attach("EventFeed");

    EventFeed::ClearMessages();
}

Void UnActivateOnPlayer(K_BoxEffectOnPlayer _EffectOnPlayer) {
    declare CSmPlayer Player = GetPlayer(_EffectOnPlayer.Login);
	declare Text[] TMKart_ActiveEffects for Player = [];
	TMKart_ActiveEffects.remove(_EffectOnPlayer.Effect.Marker);

    if(Player != Null) {
        if (Player.RequestsSpectate == False) {
            switch(_EffectOnPlayer.Effect.Marker) {
                case "e_no_engine": {
                    SetPlayer_Delayed_NoEngine(Player, False);
                }
                case "e_cruise_all": {
                    SetPlayer_Delayed_Cruise(Player, False, Player.Speed);
                }
                case "e_turbo_self": {
                    SetPlayer_Delayed_BoostUp(Player, False);
                }
                case "e_turbo2_self": {
                    SetPlayer_Delayed_Boost2Up(Player, False);
                }
                case "e_fragile": {
                    SetPlayer_Delayed_Fragile(Player, False);
                }
                case "e_nobrake": {
                    SetPlayer_Delayed_NoBrakes(Player, False);
                }
                case "e_low_gravity": {
                    SetPlayer_Delayed_GravityCoef(Player, 1.0);
                }
                case "e_slowmo": {
                    SetPlayer_Delayed_SlowMotion(Player, False);
                }
                case "e_no_grip":
                {
                    SetPlayer_Delayed_AdherenceCoef(Player, 1.);
                }
                case "e_no_steer":
                {
                    SetPlayer_Delayed_NoSteer(Player, False);
                }
				case "e_respawn": {
					RespawnPlayer(Player);
				}
            }
		}
    }
    G_EffectOnPlayer.removekey(TL::ToText(_EffectOnPlayer.StartAt));
}

Void ClearEffectOnPlayer(CSmPlayer _Player) {
    foreach(EffectOnPlayer in G_EffectOnPlayer) {
        if(EffectOnPlayer.Login == _Player.User.Login) {
            UnActivateOnPlayer(EffectOnPlayer);
        }
    }
    SetPlayer_Delayed_Reset(_Player);
	declare Text[] TMKart_ActiveEffects for _Player = [];
	TMKart_ActiveEffects.clear();
}

Void ActivateOnPlayer(CSmPlayer _Player, K_BoxEffect _Effect) {
    // check if _Player _Effect are full, if so don't try to apply more...
    if (SetPlayer_DelayedIsFull(_Player)) return;
	declare Text[] TMKart_ActiveEffects for _Player = [];

	if (_Effect.TargetMode != "self" && TMKart_ActiveEffects.exists("e_immunity")) {
		return;
	}

	switch(_Effect.Marker) {
        case "e_no_engine": {
            SetPlayer_Delayed_NoEngine(_Player, True);
        }
        case "e_cruise_all": {
            SetPlayer_Delayed_Cruise(_Player, True, ML::Rand(20., 40.)*10.);
        }
        case "e_turbo_self": {
            SetPlayer_Delayed_BoostDown(_Player, True); // was boostUp
        }
        case "e_turbo2_self": {
            SetPlayer_Delayed_Boost2Down(_Player, True); // was boost2Up
        }
        case "e_fragile": {
            SetPlayer_Delayed_Fragile(_Player, True);
        }
        case "e_nobrake": {
            SetPlayer_Delayed_NoBrakes(_Player, True);
        }
        case "e_low_gravity": {
            SetPlayer_Delayed_GravityCoef(_Player, 0.3);
        }
        case "e_slowmo": {
            SetPlayer_Delayed_SlowMotion(_Player, True);
        }
        case "e_no_grip": {
            SetPlayer_Delayed_AdherenceCoef(_Player, 0.25);
        }
        case "e_no_steer": {
            SetPlayer_Delayed_NoSteer(_Player, True);
        }
        case "e_ink_splats": {
            InkSplats::Splat(_Player, _Effect.Duration);
        }
		case "e_immunity": {
			ClearEffectOnPlayer(_Player);
        }
    }

    declare K_BoxEffectOnPlayer EffectOnPlayer;
    EffectOnPlayer.Effect = _Effect;
    EffectOnPlayer.StartAt = Now;
    EffectOnPlayer.EndAt = EffectOnPlayer.StartAt + _Effect.Duration;
    EffectOnPlayer.Login = _Player.User.Login;
    G_EffectOnPlayer[TL::ToText(EffectOnPlayer.StartAt)] = EffectOnPlayer;
	TMKart_ActiveEffects.add(_Effect.Marker);
}


Void CleanUp() {
    foreach (Player in AllPlayers) {
        InkSplats::Reset(Player);
    }
    G_PlayerEffect.clear();
}

Void SyncPlayerAvilEffectWithUI(CSmPlayer _Player) {
    declare netwrite Text Net_PlayerAvilEffectMarker for _Player = "";
    declare K_BoxEffect PlayerAvilEffect = G_PlayerEffect[_Player.User.Login];
    Net_PlayerAvilEffectMarker = PlayerAvilEffect.Name;
}

Void SetPlayerAvilEffect(CSmPlayer _Player, Integer _EffectIndex) {
    declare K_BoxEffect Effect = GetEffectByIndex(_EffectIndex);
    G_PlayerEffect[_Player.User.Login] = Effect;
    SyncPlayerAvilEffectWithUI(_Player);
}

Void GivePlayerRandomAvilEffect(CSmPlayer _Player) {
	declare Integer Pos = GetPlayerPosition(_Player);
	declare K_BoxEffect Effect = GetRandomEffect();
	if (Pos == 1) {
		while(Effect.TargetMode == "first") {
			Effect = GetRandomEffect();
		}
	}
    G_PlayerEffect[_Player.User.Login] = Effect;
    SyncPlayerAvilEffectWithUI(_Player);
}

CSmPlayer GetNearestPlayer(CSmPlayer _Player) {
    declare CSmPlayer NearestPlayer = _Player;
    declare Real NearestDistance = 100000.00;
    foreach (Player in Players) {
        if (Player.User.Login != _Player.User.Login) {
            declare Real CurrentDistance = ML::Abs(ML::Distance(Player.Position, _Player.Position));
            if (CurrentDistance < NearestDistance) {
                NearestDistance = CurrentDistance;
                NearestPlayer = Player;
            }
        }
    }

    return NearestPlayer;
}

Void OnPlayerActivedEffect(CSmPlayer _CurrentPlayer) {
    if (!G_PlayerEffect.existskey(_CurrentPlayer.User.Login)) return;

    declare K_BoxEffect AvilEffect = G_PlayerEffect[_CurrentPlayer.User.Login];

    if (AvilEffect.Name != "None") {
        switch(AvilEffect.TargetMode) {

            case "first": {
                declare CSmPlayer Player = GetFirstPlayer();
                if (Player != Null) {
                    ActivateOnPlayer(Player, AvilEffect);
					EventFeed::SendMessage("""${{{ AvilEffect.Color }}}{{{ AvilEffect.Name }}}$fff ➔ {{{Player.User.Name}}}""", AvilEffect.ImageURL);
                }
				SetPlayerAvilEffect(_CurrentPlayer, 0);
            }

            case "self": {
                ActivateOnPlayer(_CurrentPlayer, AvilEffect);
                EventFeed::SendMessage("""${{{ AvilEffect.Color }}}{{{ AvilEffect.Name }}}$fff ➔ {{{_CurrentPlayer.User.Name}}}""", AvilEffect.ImageURL);
                SetPlayerAvilEffect(_CurrentPlayer, 0);
            }

            case "nearest": {
                declare CSmPlayer NearestPlayer = GetNearestPlayer(_CurrentPlayer);
				if (NearestPlayer != _CurrentPlayer) {
					ActivateOnPlayer(NearestPlayer, AvilEffect);
					EventFeed::SendMessage("""${{{ AvilEffect.Color }}}{{{ AvilEffect.Name }}}$fff {{{_CurrentPlayer.User.Name}}} ➔ {{{NearestPlayer.User.Name}}}""", AvilEffect.ImageURL);
					SetPlayerAvilEffect(_CurrentPlayer, 0);
				}
            }

            case "all": {
                foreach(Player in Players) {
                    if (Player.User.Login != _CurrentPlayer.User.Login) {
                        ActivateOnPlayer(Player, AvilEffect);
                    }
                }
                EventFeed::SendMessage("""${{{ AvilEffect.Color }}}{{{ AvilEffect.Name }}}$fff {{{_CurrentPlayer.User.Name}}} ➔ Everyone""", AvilEffect.ImageURL);
                SetPlayerAvilEffect(_CurrentPlayer, 0);
            }
        }
    }
}

/**
* Processed on event loop
*/
Void Yield() {
    foreach (Player in Players) {
        if(!G_PlayerEffect.existskey(Player.User.Login)) {
            G_PlayerEffect[Player.User.Login] = GetEffectByIndex(0);
            SyncPlayerAvilEffectWithUI(Player);
        }
    }

    foreach (Event in PendingEvents) {
        if (Event.Type == CSmModeEvent::EType::OnPlayerTriggersWaypoint) {
            if (Event.Player != Null) {
                declare K_BoxEffect Effect = G_PlayerEffect[Event.Player.User.Login];
                if (Event.IsNewLap) continue; // Don't assign finished player an effect
                if (Event.IsFinish) {
                    SetPlayerAvilEffect(Event.Player, 0); // Remove the effect from the player
                    continue;
                }
                if (Effect.Name != "None") continue;
                GivePlayerRandomAvilEffect(Event.Player);   // Try to assign a random effect to the player
            }
        }

        if (Event.Type == CSmModeEvent::EType::OnPlayerRequestRespawn) {
            SetPlayerAvilEffect(Event.Player, 0); // Remove the effect from the player
            PlayerEffects::SendEffectsUrls(Event.Player.User.Login, []);
            ClearEffectOnPlayer(Event.Player);
        }

        if (Event.Type == CSmModeEvent::EType::OnPlayerRemoved) { // Event.Player is Null; Only User available
            G_PlayerEffect.removekey(Event.User.Login);
        }

    }

    foreach (UIEvent in UIManager.PendingEvents) {
        if(UIEvent.CustomEventType == "activate") {
            declare CSmPlayer Player = GetPlayer(UIEvent.UI);
            if(Player == Null) continue;
            OnPlayerActivedEffect(Player);
        }
    }

    declare Text[][Text] EffectsUrls;
    foreach(EffectOnPlayer in G_EffectOnPlayer) {
        if (!EffectsUrls.existskey(EffectOnPlayer.Login)) {
            EffectsUrls[EffectOnPlayer.Login] = [];
        }
        if (Now < EffectOnPlayer.EndAt) {
            EffectsUrls[EffectOnPlayer.Login].add(EffectOnPlayer.Effect.ImageURL);
        } else {
            UnActivateOnPlayer(EffectOnPlayer);
        }
    }

	foreach(Login => Urls in EffectsUrls) {
        PlayerEffects::SendEffectsUrls(Login, Urls);
    }
}
